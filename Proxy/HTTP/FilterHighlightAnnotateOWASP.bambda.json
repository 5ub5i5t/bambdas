{
    "bambda":{
        "http_history_display_filter":{
            "bambda":"/**\r\n* Filters Proxy HTTP history for requests with vulnerable parameters based on the OWASP Top 25\r\n* using the parameter arrays written by Tur24Tur / BugBountyzip (https://github.com/BugBountyzip).\r\n* @author Shain Lakin (https://github.com/flamebarke/SkittlesBambda)\r\n* Implements colour highlighting for each class of vulnerability along with\r\n* automatic note annotations detailing the parameter to test and class of vulnerability.\r\n**/\r\n\r\n// Define vulnerable parameter group record\r\nrecord VulnParamGroup(String title, HighlightColor color, String... parameterNames) {}\r\n\r\n// Vulnerable Parameter Groups\r\nVulnParamGroup ssrf = new VulnParamGroup(\"SSRF\", HighlightColor.GREEN, \"dest\", \"redirect\", \"uri\", \"path\", \"continue\", \"url\", \"window\", \"next\", \"data\", \"reference\", \"site\", \"html\", \"val\", \"validate\", \"domain\", \"callback\", \"return\", \"page\", \"feed\", \"host\", \"port\", \"to\", \"out\", \"view\", \"dir\");\r\nVulnParamGroup sql = new VulnParamGroup(\"SQL\", HighlightColor.BLUE, \"id\", \"page\", \"report\", \"dir\", \"search\", \"category\", \"file\", \"class\", \"url\", \"news\", \"item\", \"menu\", \"lang\", \"name\", \"ref\", \"title\", \"view\", \"topic\", \"thread\", \"type\", \"date\", \"form\", \"main\", \"nav\", \"region\");\r\nVulnParamGroup xss = new VulnParamGroup(\"XSS\", HighlightColor.ORANGE, \"q\", \"s\", \"search\", \"id\", \"lang\", \"keyword\", \"query\", \"page\", \"keywords\", \"year\", \"view\", \"email\", \"type\", \"name\", \"p\", \"month\", \"image\", \"list_type\", \"url\", \"terms\", \"categoryid\", \"key\", \"l\", \"begindate\", \"enddate\");\r\nVulnParamGroup lfi = new VulnParamGroup(\"LFI\", HighlightColor.YELLOW, \"cat\", \"dir\", \"action\", \"board\", \"date\", \"detail\", \"file\", \"download\", \"path\", \"folder\", \"prefix\", \"include\", \"page\", \"inc\", \"locate\", \"show\", \"doc\", \"site\", \"type\", \"view\", \"content\", \"document\", \"layout\", \"mod\", \"conf\");\r\nVulnParamGroup or = new VulnParamGroup(\"OR\", HighlightColor.PINK, \"next\", \"url\", \"target\", \"rurl\", \"dest\", \"destination\", \"redir\", \"redirect_uri\", \"redirect_url\", \"redirect\", \"out\", \"view\", \"to\", \"image_url\", \"go\", \"return\", \"returnTo\", \"return_to\", \"checkout_url\", \"continue\", \"return_path\");\r\nVulnParamGroup rce = new VulnParamGroup(\"RCE\", HighlightColor.RED, \"cmd\", \"exec\", \"command\", \"execute\", \"ping\", \"query\", \"jump\", \"code\", \"reg\", \"do\", \"func\", \"arg\", \"option\", \"load\", \"process\", \"step\", \"read\", \"feature\", \"exe\", \"module\", \"payload\", \"run\", \"print\");\r\n\r\n// Toggle for highlighting\r\nboolean highlightEnabled = true;\r\n\r\n// Set multi vulnerable parameter group colour\r\nHighlightColor multipleVulnColor = HighlightColor.MAGENTA;\r\nVulnParamGroup[] groups = {ssrf, sql, xss, lfi, or, rce};\r\nSet<String> foundParams = new HashSet<>();\r\nMap<HighlightColor, Integer> colorCounts = new HashMap<>();\r\nString combinedNotes = \"\";\r\n\r\n// Get the request object\r\nvar request = requestResponse.request();\r\n\r\n// Main loop to check for matches\r\nfor (VulnParamGroup group : groups) {\r\n    for (String paramName : group.parameterNames()) {\r\n        if (request.hasParameter(paramName, HttpParameterType.URL) ||\r\n            request.hasParameter(paramName, HttpParameterType.BODY)) {\r\n            if (highlightEnabled) {\r\n                foundParams.add(group.title() + \": \" + paramName);\r\n                colorCounts.put(group.color(), colorCounts.getOrDefault(group.color(), 0) + 1);\r\n            }\r\n            // Return if only one vulnerability class applies\r\n            if (!highlightEnabled) {\r\n                requestResponse.annotations().setHighlightColor(group.color());\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// If more than one vulnerability class applies set the multi vulnerable parameter colour\r\nif (!foundParams.isEmpty()) {\r\n    HighlightColor highlightColor = multipleVulnColor;\r\n    if (colorCounts.size() == 1) {\r\n        highlightColor = colorCounts.keySet().iterator().next();\r\n    }\r\n    \r\n    requestResponse.annotations().setHighlightColor(highlightColor);\r\n    combinedNotes = String.join(\", \", foundParams);\r\n    requestResponse.annotations().setNotes(combinedNotes);\r\n    return true;\r\n}\r\n\r\nreturn false;"
        }
    }
}